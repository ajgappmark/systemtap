set TEST_NAME "dtrace_vfork_exec"
set build_dir ""
set test_progs {"dtrace_vfork_parent" "dtrace_child"}

if {![installtest_p]} { untested $TEST_NAME; return }
if {![uprobes_p]} { untested $TEST_NAME; return }

# Use testcase specific directory for testcase artifacts
set artifactsdir [setup_artifacts_dir]
set origsrcdir $srcdir
set srcdir [pwd]
cd $artifactsdir

source $srcdir/$subdir/test_progs.tcl

proc run_test_prog {} {
    global build_dir
    catch { exec $build_dir/dtrace_vfork_parent $build_dir/dtrace_child }
    return 0
}

set output_string "parent - pid: \[0-9\]+\r\nparent - child pid: \[0-9\]+\r\nchild - pid: \[0-9\]+\r\nparent - finished\r\n"

# Build everything (without semaphores)
set TEST_NAME "dtrace_vfork_exec1"
if {[build_test_progs "Makefile.vfork_exec" $test_progs] == 0} {
    fail "$TEST_NAME - build failure"
    cd $srcdir
    set srcdir $origsrcdir
    return
} else {
    pass "$TEST_NAME - build success"
}

# Run the test (without semaphores)
set TEST_NAME "dtrace_vfork_exec2"
stap_run $TEST_NAME run_test_prog $output_string \
  $srcdir/$subdir/dtrace_vfork_exec.stp $build_dir/dtrace_vfork_parent \
  $build_dir/dtrace_child

# Build everything (with semaphores)
set TEST_NAME "dtrace_vfork_exec3"
if {[build_test_progs "Makefile.vfork_exec" $test_progs "-DUSE_SEMAPHORES"] == 0} {
    fail "$TEST_NAME - build failure"
    cd $srcdir
    set srcdir $origsrcdir
    return
} else {
    pass "$TEST_NAME - build success"
}

# Run the test (with semaphores)
set TEST_NAME "dtrace_vfork_exec4"
stap_run $TEST_NAME run_test_prog $output_string \
  $srcdir/$subdir/dtrace_vfork_exec.stp $build_dir/dtrace_vfork_parent \
  $build_dir/dtrace_child

# Switch back from the testcase specific working directory
cd $srcdir
set srcdir $origsrcdir
